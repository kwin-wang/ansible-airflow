---
- include: "install.RedHat.yml"

- name: Create {{ airflow_deploy_user }}
  become: yes
  become_user: root
  user: 
    name: "{{ airflow_deploy_user }}"
    password: "{{ airflow_deploy_user }}"

- name: Add ansible user to supervisor groups
  become: yes
  become_user: root
  user: name={{ansible_user}} groups={{airflow_deploy_groups}} append=yes

- name: Make sudo command no password of airflow deploy user {{airflow_deploy_user}}
  become: yes
  become_user: root
  template:
    src: "{{ airflow_sudoer_template.src }}"
    dest: "{{ airflow_sudoer_template.dest }}"

- name: Create airflow virtual env
  become: yes
  become_user: "{{airflow_deploy_user}}"
  become_method: sudo
  shell: "{{conda}} create -n {{airflow_virtual_env}} -y pandas"
  args:
    creates: "{{airflow_virtual_env_bin_path}}/conda"

- name: Install Airflow Extra Packages
  become: yes
  become_user: "{{ airflow_deploy_user}}"
  conda: 
    name: "{{item}}" 
    state: present 
    extra_args: " -n {{ airflow_virtual_env }}"
    executable: "{{ conda }}"
  with_items:
    - pytz 
    - cryptography 
    - pyOpenSSL 
    - ndg-httpsclient 
    - pyasn1 
    - psycopg2 

- name: Install airflow
  become: yes
  become_user: "{{ airflow_deploy_user }}"
  shell:  "{{pip}} install airflow[celery,postgresql,hive]=={{airflow_version}}"
  tags:
    - airflow

- name: Link airflow
  become: yes
  become_method: sudo
  file: src={{airflow_command_path}} dest={{airflow_command_link_path}} state=link

- name: Creates Airflow Home Directory 
  become: yes
  become_user: root
  file: 
    path: "{{ item }}"
    state: directory 
    owner: "{{airflow_deploy_user}}"
    group: "{{airflow_deploy_user}}" 
    mode: 'g+rwx'
  with_items:
    - "{{ airflow_home }}"
    - "{{ airflow_meta_folder}}"
    - "{{ airflow_deploy_folder }}"
    - "{{ airflow_share_folder }}"
    - "{{ airflow_base_log_folder }}"

# Configuration
- name: Overwrite configuration
  become: yes
  become_user: "{{airflow_deploy_user}}"
  template: 
    src: "{{airflow_config_template.src}}" 
    dest: "{{ airflow_config_template.dest }}"
    owner: "{{airflow_config_template.owner|default(omit)}}"
    group: "{{ airflow_config_template.group|default(omit)}}"
    backup: "{{ airflow_config_template.backup|default(omit)}}"
    mode: "{{airflow_config_template.mode|default(omit)}}"
  notify:
    - init airflow db
    - restart airflow webserver
    - restart airflow scheduler
  tags:
    - airflow_cfg
    - airflow_init
    - airflow

- name: Overwrite airflow profile
  become: yes
  become_user: root
  template: src="{{airflow_profile_template.src}}" dest="{{airflow_profile_template.dest}}"
  notify:
    - init airflow db
    - restart airflow webserver
    - restart airflow scheduler

- name: "Init airflow gloabl env and  copy airflow.sh to /etc/profiled.d/"
  become: yes
  become_user: root
  template: 
    src: "{{airflow_sudoer_template.src}}" 
    dest: "{{ airflow_sudoer_template.dest }}"
  tags:
    - airflow_cfg
    - airflow_init
    - airflow

- name: Set airflow supervisor config
  become: yes
  become_method: sudo
  template: 
    src: "{{item.src}}" 
    dest: "{{ item.dest }}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{ item.group|default(omit)}}"
    backup: "{{ item.backup|default(omit)}}"
    mode: "{{item.mode|default(omit)}}"
  with_items:  "{{ airflow_supervisor_conf_template }}"
  notify:
    - reread supervisord
    - update supervisord
  tags: test


# Configuration
- name: Set other configuration
  when: airflow_other_config is defined and airflow_other_template is not none
  become: yes
  become_user: root
  template: 
    src: "{{item.src}}" 
    dest: "{{ item.dest }}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{ item.group|default(omit)}}"
    backup: "{{ item.backup|default(omit)}}"
    mode: "{{item.mode|default(omit)}}"
  notify: "{{ item.notify|default(omit)}}"
  with_items: "{{airflow_other_templates}}"
  tags:
    - airflow
    - airflow_other_config
    - airflow_config
  

#- name: Setting up a Backend
#  become: yes
#  become_user: "{{ airflow_deploy_user }}"
#  when: >-
#    airflow_db_operation is defined 
#    and (airflow_db_operation ==  airflow_initdb
#    or airflow_db_operation == airflow_resetdb
#    or airflow_db_operation == airflow_upgradedb)
#  shell :  "{{ airflow_cmd }} {{airflow_db_operation}} {{ '-y' if airflow_db_operation == airflow_resetdb else '' }}"
#  environment: 
#    - AIRFLOW_HOME: "{{ airflow_home }}"
#    - PYTHONPATH: "{{ airflow_local_settings_py_file_path }}:{{ airflow_helper_py_file_path }}"
#  tags:
#     - airflow_init
#     - airflow_db_init
#
#- name: flush supervirsor
#  shell: supervisorctl reread && supervisorctl update
#  tags: hello

#- name: Ensure airflow service running
#  supervisorctl: name="{{item}}" state="started"
#  with_items:
#      - airflow_webserver
#      - airflow_scheduler
#  tags: hello
